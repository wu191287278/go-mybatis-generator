package controller

import (
	"github.com/gin-gonic/gin"
	. "{{{artifact}}}/domain"
	. "{{{artifact}}}/service"
	"net/http"
)

type {{domainName}}Controller struct {
	{{lowerDomainName}}Service *{{domainName}}Service
}

func New{{domainName}}Controller(r *gin.Engine, {{lowerDomainName}}Service *{{domainName}}Service) *{{domainName}}Controller {
    {{lowerDomainName}}Controller := &{{domainName}}Controller{ {{lowerDomainName}}Service: {{lowerDomainName}}Service }
    {{lowerDomainName}} := r.Group("{{lowerDomainName}}")
    {
        {{lowerDomainName}}.GET("", {{lowerDomainName}}Controller.Search)
    {{#hasPrimaryKey}}
        {{lowerDomainName}}.GET("/{{#primaryKeys}}:{{lowerName}}{{#hasNext}}/{{/hasNext}}{{/primaryKeys}}", {{lowerDomainName}}Controller.SelectByPrimaryKey)
        {{lowerDomainName}}.DELETE("/{{#primaryKeys}}:{{lowerName}}{{#hasNext}}/{{/hasNext}}{{/primaryKeys}}", {{lowerDomainName}}Controller.DeleteByPrimaryKey)
        {{lowerDomainName}}.PUT("", {{lowerDomainName}}Controller.UpdateByPrimaryKeySelective)
    {{/hasPrimaryKey}}
        {{lowerDomainName}}.POST("", {{lowerDomainName}}Controller.InsertSelective)
    }
    return {{lowerDomainName}}Controller
}

// Search {{lowerDomainName}}
// @Summary
// @Description
// @ID search
// @Param page    query    uint32    false    "page"
// @Param size    query    uint32    false    "size"
// @Param orderBy    query    string    false    "order by table column"
// @Param sort    query    string    false    "asc/desc"
{{#fields}}
// @Param {{lowerName}}    query    {{propertyType}}    false    "{{remarks}}"
{{/fields}}
// @Success 200 {array} {{domainName}}
// @Router /{{lowerDomainName}} [get]
func ({{lowerDomainName}}Controller *{{domainName}}Controller) Search(c *gin.Context) {

    var params struct {
        Page    uint32	`form:"page"`
        Size    uint32	`form:"size"`
        OrderBy string	`form:"orderBy"`
        Sort    string	`form:"sort"`
{{#fields}}
        {{upperName}}   {{propertyType}}  `form:"{{lowerName}}"`
{{/fields}}
    }

	e := c.ShouldBind(&params)
	if e != nil {
		_ = c.AbortWithError(http.StatusBadRequest, e)
		return
	}

    query := New{{domainName}}Example()

    if params.Page == 0 {
        params.Page = 1
    }

    if params.Size == 0 {
        params.Size = 20
    }

    query.WithPage(params.Page, params.Size)

    if params.OrderBy != ""{
        if params.Sort=="" {
            params.Sort = "asc"
        }
        query.WithOrderByClause(params.OrderBy +" " +params.Sort)
    }

{{#fields}}
{{#isInt8}}
	if params.{{upperName}} != 0 {
    	query.And{{upperName}}EqualTo(params.{{upperName}})
    }

{{/isInt8}}
{{#isInt16}}
	if params.{{upperName}} != 0 {
    	query.And{{upperName}}EqualTo(params.{{upperName}})
    }

{{/isInt16}}
{{#isInt32}}
	if params.{{upperName}} != 0 {
    	query.And{{upperName}}EqualTo(params.{{upperName}})
    }

{{/isInt32}}
{{#isInt64}}
	if params.{{upperName}} != 0 {
    	query.And{{upperName}}EqualTo(params.{{upperName}})
    }

{{/isInt64}}
{{#isBoolean}}
	if params.{{upperName}} != 0 {
    	query.And{{upperName}}EqualTo(params.{{upperName}})
    }

{{/isBoolean}}
{{#isString}}
	if params.{{upperName}} != "" {
    	query.And{{upperName}}EqualTo(params.{{upperName}})
    }

{{/isString}}
{{/fields}}
	{{lowerDomainName}}, e := {{lowerDomainName}}Controller.{{lowerDomainName}}Service.SelectByExample(query)
	if e != nil {
		_ = c.AbortWithError(http.StatusInternalServerError, e)
		return
	}

	c.JSON(http.StatusOK, {{lowerDomainName}})
}


// Save a {{lowerDomainName}}
// @Summary
// @Description
// @ID Save
// @Param {{lowerDomainName}}    body    {{domainName}}    true    "{{{remarks}}}"
// @Success 200 {object} {{domainName}}
// @Router /{{lowerDomainName}} [post]
func ({{lowerDomainName}}Controller *{{domainName}}Controller) InsertSelective(c *gin.Context) {
	{{lowerDomainName}} := &{{domainName}}{}
	e := c.ShouldBindJSON({{lowerDomainName}})
	if e != nil {
		_ = c.AbortWithError(http.StatusInternalServerError, e)
		return
	}

	{{lowerDomainName}}, e = {{lowerDomainName}}Controller.{{lowerDomainName}}Service.InsertSelective({{lowerDomainName}})
	if e != nil {
		_ = c.AbortWithError(http.StatusInternalServerError, e)
		return
	}

	c.JSON(http.StatusOK, {{lowerDomainName}})

}
{{#hasPrimaryKey}}

// Update a {{lowerDomainName}}
// @Summary
// @Description
// @ID Update
// @Param {{lowerDomainName}}    body    {{domainName}}    true    "{{domainName}}"
// @Success 200 {object} {{domainName}}
// @Router /{{lowerDomainName}} [put]
func ({{lowerDomainName}}Controller *{{domainName}}Controller) UpdateByPrimaryKeySelective(c *gin.Context) {
	{{lowerDomainName}} := &{{domainName}}{}
	e := c.ShouldBindJSON({{lowerDomainName}})
	if e != nil {
		_ = c.AbortWithError(http.StatusInternalServerError, e)
		return
	}

	result, e := {{lowerDomainName}}Controller.{{lowerDomainName}}Service.UpdateByPrimaryKeySelective({{lowerDomainName}})
	if e != nil {
		_ = c.AbortWithError(http.StatusInternalServerError, e)
		return
	}

    if result == 0 {
        c.AbortWithStatus(http.StatusNotFound)
        return
    }

	c.JSON(http.StatusOK, {{lowerDomainName}})

}

// Delete a {{lowerDomainName}}
// @Summary
// @Description
// @ID Delete
{{#primaryKeys}}
// @Param {{lowerName}}    path    {{propertyType}}    true    "{{remarks}}"
{{/primaryKeys}}
// @Success 200 {object} {{domainName}}
// @Router /{{lowerDomainName}}/{{#primaryKeys}}:{{lowerName}}{{#hasNext}}/{{/hasNext}}{{/primaryKeys}} [delete]
func ({{lowerDomainName}}Controller *{{domainName}}Controller) DeleteByPrimaryKey(c *gin.Context) {

    var params struct {
    {{#primaryKeys}}
        {{upperName}}   {{propertyType}}  `uri:"{{lowerName}}"`
    {{/primaryKeys}}
    }

    var e error
    if e = c.ShouldBindUri(&params); e == nil {
        _, e := {{lowerDomainName}}Controller.{{lowerDomainName}}Service.DeleteByPrimaryKey({{#primaryKeys}}params.{{upperName}}{{#hasNext}},{{/hasNext}}{{/primaryKeys}})
        if e == nil {
            return
        }
    }

    c.AbortWithError(http.StatusInternalServerError, e)
}

// Get a {{lowerDomainName}}
// @Summary
// @Description
// @ID Delete
{{#primaryKeys}}
// @Param {{lowerName}}    path    {{propertyType}}    true    "{{remarks}}"
{{/primaryKeys}}
// @Success 200 {object} {{domainName}}
// @Router /{{lowerDomainName}}/{{#primaryKeys}}:{{lowerName}}{{#hasNext}}/{{/hasNext}}{{/primaryKeys}} [get]
func ({{lowerDomainName}}Controller *{{domainName}}Controller) SelectByPrimaryKey(c *gin.Context) {

    var params struct {
    {{#primaryKeys}}
        {{upperName}}   {{propertyType}}  `uri:"{{lowerName}}"`
    {{/primaryKeys}}
    }

    var e error
    if e = c.ShouldBindUri(&params); e == nil {
        {{lowerDomainName}}, e := {{lowerDomainName}}Controller.{{lowerDomainName}}Service.SelectByPrimaryKey({{#primaryKeys}}params.{{upperName}}{{#hasNext}},{{/hasNext}}{{/primaryKeys}})
        if e == nil {
            c.JSON(http.StatusOK, {{lowerDomainName}})
            return
        }
    }

    c.AbortWithError(http.StatusInternalServerError, e)
}

{{/hasPrimaryKey}}
